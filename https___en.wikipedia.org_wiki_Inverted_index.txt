Inverted index - Wikipedia Jump to content Main menu Main menu move to sidebar hide Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Languages Language links are at the top of the page across from the title. Search Create account Log in Personal tools Create account Log in Pages for logged out editors learn more Contributions Talk Contents move to sidebar hide (Top) 1Applications 2Compression 3See also 4References 5External links Toggle the table of contents Toggle the table of contents Inverted index 14 languages Azərbaycanca Català Čeština Deutsch Español Français 한국어 日本語 Norsk bokmål Português Русский Suomi Українська 中文 Edit links Article Talk English Read Edit View history Tools Tools move to sidebar hide Actions Read Edit View history General What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version From Wikipedia, the free encyclopedia Type of database index In computer science, an inverted index (also referred to as a postings list, postings file, or inverted file) is a database index storing a mapping from content, such as words or numbers, to its locations in a table, or in a document or a set of documents (named in contrast to a forward index, which maps from documents to content).[1] The purpose of an inverted index is to allow fast full-text searches, at a cost of increased processing when a document is added to the database.[2] The inverted file may be the database file itself, rather than its index. It is the most popular data structure used in document retrieval systems,[3] used on a large scale for example in search engines. Additionally, several significant general-purpose mainframe-based database management systems have used inverted list architectures, including ADABAS, DATACOM/DB, and Model 204. There are two main variants of inverted indexes: A record-level inverted index (or inverted file index or just inverted file) contains a list of references to documents for each word. A word-level inverted index (or full inverted index or inverted list) additionally contains the positions of each word within a document.[4] The latter form offers more functionality (like phrase searches), but needs more processing power and space to be created. Applications[edit] The inverted index data structure is a central component of a typical search engine indexing algorithm.[5] A goal of a search engine implementation is to optimize the speed of the query: find the documents where word X occurs.[6] Once a forward index is developed, which stores lists of words per document, it is next inverted to develop an inverted index. Querying the forward index would require sequential iteration through each document and to each word to verify a matching document. The time, memory, and processing resources to perform such a query are not always technically realistic. Instead of listing the words per document in the forward index, the inverted index data structure is developed which lists the documents per word. With the inverted index created, the query can be resolved by jumping to the word ID (via random access) in the inverted index. In pre-computer times, concordances to important books were manually assembled. These were effectively inverted indexes with a small amount of accompanying commentary that required a tremendous amount of effort to produce. In bioinformatics, inverted indexes are very important in the sequence assembly of short fragments of sequenced DNA. One way to find the source of a fragment is to search for it against a reference DNA sequence. A small number of mismatches (due to differences between the sequenced DNA and reference DNA, or errors) can be accounted for by dividing the fragment into smaller fragments—at least one subfragment is likely to match the reference DNA sequence. The matching requires constructing an inverted index of all substrings of a certain length from the reference DNA sequence. Since the human DNA contains more than 3 billion base pairs, and we need to store a DNA substring for every index and a 32-bit integer for index itself, the storage requirement for such an inverted index would probably be in the tens of gigabytes. Compression[edit] For historical reasons, inverted list compression and bitmap compression were developed as separate lines of research, and only later were recognized as solving essentially the same problem.[7] See also[edit] Index (search engine) Reverse index Vector space model References[edit] ^ Knuth, D. E. (1997) [1973]. "6.5. Retrieval on Secondary Keys". The Art of Computer Programming (Third ed.). Reading, Massachusetts: Addison-Wesley. ISBN 0-201-89685-0. ^ Salton, Gerard; Fox, Edward A.; Wu, Harry (November 1983). "Extended Boolean information retrieval". Communications of the ACM. 26 (11): 1022–1036. doi:10.1145/182.358466. ^ Zobel, Justin; Moffat, Alistair; Ramamohanarao, Kotagiri (December 1998). "Inverted files versus signature files for text indexing". ACM Transactions on Database Systems. New York: Association for Computing Machinery. 23 (4): 453–490. doi:10.1145/296854.277632. S2CID 7293918. ^ Baeza-Yates, Ricardo; Ribeiro-Neto, Berthier (1999). Modern information retrieval. Reading, Massachusetts: Addison-Wesley Longman. p. 192. ISBN 0-201-39829-X. ^ Zobel, Justin; Moffat, Alistair (July 2006). "Inverted Files for Text Search Engines". ACM Computing Surveys. New York: Association for Computing Machinery. 38 (2): 6. doi:10.1145/1132956.1132959. S2CID 207158957. ^ Information Retrieval: Implementing and Evaluating Search Engines. Cambridge, Massachusetts: MIT Press. 2010. ISBN 978-0-262-02651-2. Archived from the original on 2020-10-05. Retrieved 2010-08-08. ^ Wang, Jianguo; Lin, Chunbin; Papakonstantinou, Yannis; Swanson, Steven (9 May 2017). "An Experimental Study of Bitmap Compression vs. Inverted List Compression". Proceedings of the 2017 ACM International Conference on Management of Data. Association for Computing Machinery. pp. 993–1008. doi:10.1145/3035918.3064007. Retrieved 1 May 2023. External links[edit] NIST's Dictionary of Algorithms and Data Structures: inverted index Managing Gigabytes for Java a free full-text search engine for large document collections written in Java. Lucene - Apache Lucene is a full-featured text search engine library written in Java. Sphinx Search - Open source high-performance, full-featured text search engine library used by craigslist and others employing an inverted index. Example implementations on Rosetta Code Caltech Large Scale Image Search Toolbox: a Matlab toolbox implementing Inverted File Bag-of-Words image search. Retrieved from "https://en.wikipedia.org/w/index.php?title=Inverted_index&oldid=1153935563" Categories: Data management Search algorithms Database index techniques Substring indices Hidden categories: Articles with short description Short description matches Wikidata This page was last edited on 9 May 2023, at 07:04 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License 3.0; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement Toggle limited content width